import fs from 'fs';
import { log } from '../utils/logger.js';

export class OrderManager {
    constructor(accounts) {
        this.accounts = Array.from(accounts.values());
        
        // –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        const configContent = fs.readFileSync('config.txt', 'utf8');
        const lines = configContent.split('\n');
        this.config = {
            tickers: [],
            leverages: [],
            amount: { min: 0, max: 0 }
        };

        for (const line of lines) {
            if (line.trim()) {
                if (line.startsWith('TICKERS=')) {
                    const tickersStr = line.split('=')[1].trim();
                    this.config.tickers = tickersStr.replace(/['"]/g, '').split(',').map(t => t.trim());
                } else if (line.startsWith('LEVERAGES=')) {
                    const leveragesStr = line.split('=')[1].trim();
                    this.config.leverages = leveragesStr.replace(/['"]/g, '').split(',').map(l => parseInt(l.trim()));
                } else if (line.startsWith('AMOUNT_MIN=')) {
                    this.config.amount.min = parseFloat(line.split('=')[1].trim());
                } else if (line.startsWith('AMOUNT_MAX=')) {
                    this.config.amount.max = parseFloat(line.split('=')[1].trim());
                }
            }
        }
    }

    getPairedAccounts() {
        if (this.accounts.length % 2 !== 0) {
            throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–µ—Ç–Ω—ã–º');
        }

        const shuffled = [...this.accounts].sort(() => Math.random() - 0.5);
        
        const pairs = [];
        for (let i = 0; i < shuffled.length; i += 2) {
            pairs.push([shuffled[i], shuffled[i + 1]]);
        }
        
        return pairs;
    }

    async sendPairedOrders(botUsername) {
        try {
            const pairs = this.getPairedAccounts();
            
            await Promise.all(pairs.map(async pair => {
                const baseParams = {
                    ticker: this.config.tickers[Math.floor(Math.random() * this.config.tickers.length)],
                    leverage: this.config.leverages[Math.floor(Math.random() * this.config.leverages.length)],
                    amount: (Math.random() * (this.config.amount.max - this.config.amount.min) + 
                            this.config.amount.min).toFixed(2)
                };

                const account1Name = pair[0].username || pair[0].firstName || pair[0].phoneNumber;
                const account2Name = pair[1].username || pair[1].firstName || pair[1].phoneNumber;

                const tableData = [
                    {
                        '–ê–∫–∫–∞—É–Ω—Ç': account1Name,
                        '–ü–æ–∑–∏—Ü–∏—è': 'LONG',
                        '–¢–æ–∫–µ–Ω': baseParams.ticker,
                        '–ü–ª–µ—á–æ': `${baseParams.leverage}x`,
                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': baseParams.amount
                    },
                    {
                        '–ê–∫–∫–∞—É–Ω—Ç': account2Name,
                        '–ü–æ–∑–∏—Ü–∏—è': 'SHORT',
                        '–¢–æ–∫–µ–Ω': baseParams.ticker,
                        '–ü–ª–µ—á–æ': `${baseParams.leverage}x`,
                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': baseParams.amount
                    }
                ];

                log('–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏–π:', 'info');
                console.table(tableData);

                const longCommand = `/long ${baseParams.ticker} ${baseParams.leverage}x ${baseParams.amount}`;
                const shortCommand = `/short ${baseParams.ticker} ${baseParams.leverage}x ${baseParams.amount}`;

                await Promise.all([
                    this.sendCommand(pair[0], botUsername, longCommand),
                    this.sendCommand(pair[1], botUsername, shortCommand)
                ]);

                const stopLossParams = {
                    stopLossTakeProfit: Math.floor(Math.random() * 6 + 5),
                }

                log(`–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Stop Loss –¥–ª—è –ø–∞—Ä—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤...`, 'wait');
                await Promise.all([
                    this.setStopLoss(pair[0], botUsername, baseParams.ticker, stopLossParams),
                    this.setStopLoss(pair[1], botUsername, baseParams.ticker, stopLossParams)
                ]);
            }));
            
        } catch (error) {
            log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∞—Ä–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: ' + error, 'error');
        }
    }

    async sendCommand(account, botUsername, orderCommand) {
        const accountName = account.username || account.firstName || account.phoneNumber;
        try {
            const [direction, ticker, leverage, amount] = orderCommand.split(' ');
            const orderType = direction.replace('/', '').toUpperCase(); 
            const leverageValue = leverage.replace('x', 'X');

            log(`[${accountName}] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${orderCommand}`, 'info');
            await account.client.sendMessage(botUsername, {
                message: orderCommand
            });

            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
            for (let attempt = 1; attempt <= 3; attempt++) {
                log(`[${accountName}] –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ...`, 'debug');
                
                // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞
                await new Promise(resolve => setTimeout(resolve, 5000));

                // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                const messages = await account.client.getMessages(botUsername, { limit: 5 });
                
                if (messages.length === 0) {
                    log(`[${accountName}] –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`, 'error');
                    continue;
                }

                const messagePromises = messages.map(message => new Promise((resolve, reject) => {
                    const messageText = message?.message || '';
                    
                    if (!messageText || messageText.startsWith('/')) {
                        reject('–ü—Ä–æ–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è');
                        return;
                    }
                    
                    log(`[${accountName}] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${messageText}`, 'debug');
                    
                    const hasConfirmButton = message?.replyMarkup?.rows?.some(row => 
                        row.buttons?.some(btn => 
                            btn.text === 'Confirm' || 
                            btn.text === '‚úÖ Confirm'
                        )
                    );
                    
                    const isOrderPreview = messageText.includes('üëÄ Order Preview');
                    const hasMarket = messageText.includes(`Market: ${orderType}`);
                    const hasTicker = messageText.includes(ticker.toUpperCase());
                    const hasLeverage = messageText.includes(`Leverage: ${leverageValue}`);
                    
                    log(`[${accountName}] –ü—Ä–æ–≤–µ—Ä–∫–∏: Preview=${isOrderPreview}, Market=${hasMarket}, Ticker=${hasTicker}, Leverage=${hasLeverage}, Button=${hasConfirmButton}`, 'debug');

                    if (isOrderPreview && hasMarket && hasTicker && hasLeverage && hasConfirmButton) {
                        log(`[${accountName}] –ù–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`, 'debug');
                        resolve(message);
                    } else {
                        reject(`–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç`);
                    }
                }));

                try {
                    const message = await Promise.any(messagePromises);
                    if (message) {
                        const clicked = await this.clickConfirmButton(message, accountName);
                        if (clicked) {
                            log(`[${accountName}] –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω`, 'success');
                            return true;
                        }
                    }
                } catch (error) {
                    log(`[${accountName}] –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç`, 'debug');
                    continue;
                }
            }

            log(`[${accountName}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫`, 'error');
            return false;

        } catch (error) {
            log(`[${accountName}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ä–¥–µ—Ä–∞: ${error}`, 'error');
            return false;
        }
    }

    async sendSimpleCommand(account, botUsername, command) {
        const accountName = account.username || account.firstName || account.phoneNumber;
        try {
            log(`[${accountName}] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${command}`, 'info');
            await account.client.sendMessage(botUsername, {
                message: command
            });
            return true;
        } catch (error) {
            log(`[${accountName}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã: ${error}`, 'error');
            return false;
        }
    }

    async waitForButtonMessage(account, botUsername) {
        const accountName = account.username || account.firstName || account.phoneNumber;
        for (let i = 0; i < 5; i++) {
            const messages = await account.client.getMessages(botUsername, {
                limit: 5
            });
            
            for (const message of messages) {
                if (message?.buttons || 
                    (message?.replyMarkup?.rows && message.replyMarkup.rows.length > 0)) {
                    return message;
                }
            }
            
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        return null;
    }

    async waitForSpecificMessage(account, botUsername) {
        const accountName = account.username || account.firstName || account.phoneNumber;
        for (let i = 0; i < 7; i++) {
            const messages = await account.client.getMessages(botUsername, {
                limit: 3
            });
            
            for (const message of messages) {
                if (message?.message?.includes('Set a stop loss') || 
                    message?.message?.includes('Set a take profit') ||
                    message?.message?.includes('Pick a %')) {
                    return message;
                }
            }
            
            await new Promise(resolve => setTimeout(resolve, 500));
        }
        log(`[${accountName}] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ SL/TP`, 'warning');
        return null;
    }

    async setStopLoss(account, botUsername, ticker, params) {
        const accountName = account.username || account.firstName || account.phoneNumber;
        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–æ–ø–ª–æ—Å—Å–∞
            log(`[${accountName}] –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–æ–ø–ª–æ—Å—Å–∞: /stoploss ${ticker}`, 'info');
            await account.client.sendMessage(botUsername, {
                message: `/stoploss ${ticker}`
            });
            await new Promise(resolve => setTimeout(resolve, 3000));

            for (let attempt = 1; attempt <= 5; attempt++) {
                const messages = await account.client.getMessages(botUsername, { limit: 10 });
                const messagePromises = messages.map(message => new Promise((resolve, reject) => {
                    const messageText = message?.message || '';
                    
                    if (!messageText) {
                        reject('–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
                        return;
                    }

                    if ((messageText.includes('Set a stop loss') || 
                         messageText.includes('Pick a % or trigger price')) &&
                        message?.replyMarkup?.rows?.some(row => 
                            row.buttons?.some(btn => 
                                btn.text === 'Set %' || 
                                btn.text === 'Set Price'
                            )
                        )) {
                        resolve(message);
                    } else {
                        reject('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç');
                    }
                }));

                try {
                    const slMessage = await Promise.any(messagePromises);
                    
                    const setButton = slMessage.replyMarkup.rows
                        .find(row => row.buttons.some(btn => 
                            btn.text === 'Set %' || 
                            btn.text === 'Set Price'
                        ))
                        .buttons.find(btn => 
                            btn.text === 'Set %' || 
                            btn.text === 'Set Price'
                        );
                    
                    await slMessage.click(setButton);
                    await new Promise(resolve => setTimeout(resolve, 4000));
                    
                    await account.client.sendMessage(botUsername, {
                        message: params.stopLossTakeProfit.toString()
                    });
                    await new Promise(resolve => setTimeout(resolve, 3000));
                    
                    const confirmMessages = await account.client.getMessages(botUsername, { limit: 5 });
                    const confirmPromises = confirmMessages.map(message => new Promise((resolve, reject) => {
                        if (message?.replyMarkup?.rows?.some(row => 
                            row.buttons?.some(btn => 
                                btn.text.includes('‚úÖ') || 
                                btn.text.toLowerCase().includes('confirm')
                            )
                        )) {
                            resolve(message);
                        } else {
                            reject('–ù–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è');
                        }
                    }));

                    const confirmMessage = await Promise.any(confirmPromises);
                    const confirmButton = confirmMessage.replyMarkup.rows
                        .find(row => row.buttons.some(btn => 
                            btn.text.includes('‚úÖ') || 
                            btn.text.toLowerCase().includes('confirm')
                        ))
                        .buttons.find(btn => 
                            btn.text.includes('‚úÖ') || 
                            btn.text.toLowerCase().includes('confirm')
                        );
                    
                    await confirmMessage.click(confirmButton);
                    log(`[${accountName}] Stop Loss —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${params.stopLossTakeProfit}%`, 'success');
                    return true;
                    
                } catch (error) {
                    if (attempt === 5) {
                        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Stop Loss –ø–æ—Å–ª–µ ${attempt} –ø–æ–ø—ã—Ç–æ–∫`);
                    }
                    await new Promise(resolve => setTimeout(resolve, 2000));
                }
            }
            
        } catch (error) {
            log(`[${accountName}] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Stop Loss: ${error.message}`, 'error');
            return false;
        }
    }

    async clickConfirmButton(message, accountName) {
        try {
            if (!message.replyMarkup?.rows) {
                return false;
            }

            for (const row of message.replyMarkup.rows) {
                for (const button of row.buttons) {
                    if (button.text === 'Confirm' || 
                        button.text === '‚úÖ Confirm') {
                        
                        await message.click(button);
                        await new Promise(resolve => setTimeout(resolve, 1000));
                        return true;
                    }
                }
            }
        } catch (error) {
            log(`[${accountName}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏: ${error}`, 'error');
        }
        return false;
    }
}
